{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","cardList","robots","cardArray","map","user","i","key","SearchBox","SearchChange","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b3607b0.chunk.js","sourcesContent":["import React from 'react';\n\nlet Card = ({name , email, id}) => {\n\treturn (\n\t\t<div className=' tc bg-light-yellow dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?300x300`}/>\n\t\t\t<h2>{name}</h2>\n\t\t\t<h3>{email}</h3>\n\t\t</div>\n\t\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nlet cardList = ({robots}) => {\n\tlet cardArray = robots.map((user, i) => {\n\t\treturn <Card \n\t\t  key={i}\n\t\t  id={robots[i].id} \n\t\t  name={robots[i].name} \n\t\t  email={robots[i].email}/>\n\t})\n\t\treturn (\n\t\t  <div>\n\t\t\t{cardArray}\n\t\t  </div>\n\t);\n}\n\nexport default cardList;","import React from 'react';\n\nlet SearchBox = ({SearchChange}) => {\n\treturn (\n\t\t<input\n\t\t  onChange={SearchChange}\n\t\t  className='pa2 ba b--yellow bg-light-yellow' \n\t\t  type='search' \n\t\t  placeholder='Find a Robot' />\n )\n}\n\nexport default SearchBox;","import React from 'react'\n\nlet Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '1px', height: '650px'}}>\n\t\t\t{props.children}\n\t\t</div>\n );\n}\n\nexport default Scroll;","import React , { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({hasError:true})\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1> Something went wrong ... </h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList.js';\nimport SearchBox from '../components/SearchBox.js';\nimport'./app.css';\nimport Scroll from '../components/Scroll.js';\nimport ErrorBoundary from '../components/ErrorBoundary.js';\nimport { setSearchField, requestRobots } from '../actions.js'\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps =(dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst {searchField, onSearchChange, robots, isPending} = this.props;\n\t\tconst filteredRobots = robots.filter(robot=>{\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())});\n\t\treturn isPending ?\n\t\t\t<h1> Loading </h1>:\n\t\t(\n\t \t <div className ='tc'>\n\t \t \t<h1 className = 'f2'> RoboFriends </h1>\n\t \t \t<SearchBox SearchChange={onSearchChange}/>\n\t \t \t<Scroll>\n\t \t \t\t<ErrorBoundary>\n\t \t \t\t\t<CardList robots ={filteredRobots} />\n\t \t \t\t</ErrorBoundary>\n\t \t \t</Scroll>\n\t \t </div>\n );\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n\t } from './constants.js'\n\nexport const setSearchField = (text)  => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload:  text\n})\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t\t.catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n\t } from './constants.js'\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots  = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, {isPending: true})\n\t\tcase  REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, {robots: action.payload,  isPending:false})\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending:false})\n\t\tdefault: \n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers.js';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = \n\tcreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App  />\n\t</Provider>, \n\tdocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}