{"ast":null,"code":"import{CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED}from'./constants.js';export var setSearchField=function setSearchField(text){return{type:CHANGE_SEARCH_FIELD,payload:text};};export var requestRobots=function requestRobots(){return function(dispatch){dispatch({type:REQUEST_ROBOTS_PENDING});fetch('https://jsonplaceholder.typicode.com/users').then(function(response){return response.json();}).then(function(data){return dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data});}).catch(function(err){return dispatch({type:REQUEST_ROBOTS_FAILED,payload:err});});};};","map":{"version":3,"sources":["/Users/jerzy.gricuk/Desktop/privet/Redux/Robo_Friends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","err"],"mappings":"AAAA,OACCA,mBADD,CAECC,sBAFD,CAGCC,sBAHD,CAICC,qBAJD,KAKS,gBALT,CAOA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,IAAD,QAAY,CACzCC,IAAI,CAAEN,mBADmC,CAEzCO,OAAO,CAAGF,IAF+B,CAAZ,EAAvB,CAKP,MAAO,IAAMG,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,SAAM,UAACC,QAAD,CAAc,CAChDA,QAAQ,CAAC,CAAEH,IAAI,CAAEL,sBAAR,CAAD,CAAR,CACAS,KAAK,CAAC,4CAAD,CAAL,CACEC,IADF,CACO,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADf,EAEEF,IAFF,CAEO,SAAAG,IAAI,QAAIL,CAAAA,QAAQ,CAAC,CAAEH,IAAI,CAAEJ,sBAAR,CAAgCK,OAAO,CAAEO,IAAzC,CAAD,CAAZ,EAFX,EAGEC,KAHF,CAGQ,SAAAC,GAAG,QAAIP,CAAAA,QAAQ,CAAC,CAAEH,IAAI,CAAEH,qBAAR,CAA+BI,OAAO,CAAES,GAAxC,CAAD,CAAZ,EAHX,EAIA,CAN4B,EAAtB","sourcesContent":["import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n\t } from './constants.js'\n\nexport const setSearchField = (text)  => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload:  text\n})\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t\t.catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err}))\n}"]},"metadata":{},"sourceType":"module"}